[1mdiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml[m
[1mindex 890eafd..8d679f6 100644[m
[1m--- a/.gitlab-ci.yml[m
[1m+++ b/.gitlab-ci.yml[m
[36m@@ -1,7 +1,7 @@[m
 variables:[m
[31m-    CURRENT_HW: "hw07"[m
[31m-    CURRENT_TEST: "testhw07"[m
[31m-    TEST_HASH_EXPECTED: "ae1f68b4e738c3236596eb50f3047489d53f4d41d0765ac735062ecd7bd5f193"[m
[32m+[m[32m    CURRENT_HW: "hw06"[m
[32m+[m[32m    CURRENT_TEST: "testhw06"[m
[32m+[m[32m    TEST_HASH_EXPECTED: "fc629c54e6f81c22ecdc2ba155faf8c2d943cd023c7410e9824541fdbe75ab7b"[m
 [m
 # pre-verify test system hash[m
 before_script:[m
[1mdiff --git a/CMakeLists.txt b/CMakeLists.txt[m
[1mindex f845074..07dc642 100644[m
[1m--- a/CMakeLists.txt[m
[1m+++ b/CMakeLists.txt[m
[36m@@ -61,4 +61,4 @@[m [mendif()[m
 [m
 #------- homework code inclusion -------[m
 [m
[31m-add_subdirectory("hw07")[m
[32m+[m[32madd_subdirectory("hw06")[m
[1mdiff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt[m
[1mindex 3dde5f2..cf64720 100644[m
[1m--- a/tests/CMakeLists.txt[m
[1m+++ b/tests/CMakeLists.txt[m
[36m@@ -20,4 +20,4 @@[m [mfunction(add_hw_test name library)[m
 endfunction()[m
 [m
 [m
[31m-add_subdirectory("hw07")[m
[32m+[m[32madd_subdirectory("hw06")[m
[1mdiff --git a/tests/hw07/CMakeLists.txt b/tests/hw07/CMakeLists.txt[m
[1mdeleted file mode 100644[m
[1mindex 81a49a2..0000000[m
[1m--- a/tests/hw07/CMakeLists.txt[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-add_hw_test(testhw07 hw07 test07.cpp)[m
[1mdiff --git a/tests/hw07/test07.cpp b/tests/hw07/test07.cpp[m
[1mdeleted file mode 100644[m
[1mindex e1387bb..0000000[m
[1m--- a/tests/hw07/test07.cpp[m
[1m+++ /dev/null[m
[36m@@ -1,694 +0,0 @@[m
[31m-/**[m
[31m- * Hello and, again, welcome to CIIP's computer aided automated testing system.[m
[31m- * We hope your experience with the exercise has been a pleasant one. Your code[m
[31m- * will processed and we are now ready to begin the test proper. Before we[m
[31m- * start, however, keep in mind that although fun and learning are the primary[m
[31m- * goals of this course, serious injuries may occur. For your own safety and the[m
[31m- * safety of others, please refrain from touching —§ﬁ™œñ√ñ∆î–ê”á»•ÃíŒî–ô “óÿï’∂√õ ﬂö…∏”±“üÀç“áƒä…†√ª›±»°ŒΩ»¨[m
[31m- */[m
[31m-[m
[31m-#include <limits>[m
[31m-#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN[m
[31m-[m
[31m-// if you activate this, doctest won't swallow exceptions[m
[31m-// #define DOCTEST_CONFIG_NO_EXCEPTIONS[m
[31m-[m
[31m-#include <doctest/doctest.h>[m
[31m-[m
[31m-#ifndef DOCTEST_REQUIRE_NOTHROW[m
[31m-#define DOCTEST_REQUIRE_NOTHROW(x) do { x; } while (0)[m
[31m-#endif[m
[31m-[m
[31m-[m
[31m-#include "hw07.h"[m
[31m-[m
[31m-// require at least c++20[m
[31m-static_assert(__cplusplus >= 202002L);[m
[31m-[m
[31m-[m
[31m-std::string str_repeat(int n, std::string_view what) {[m
[31m-    std::ostringstream os;[m
[31m-    for(int i = 0; i < n; i++)[m
[31m-        os << what;[m
[31m-    return std::move(os).str();[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("FileContent") {[m
[31m-    REQUIRE_NOTHROW(FileContent{});[m
[31m-[m
[31m-    // we need to allocate a big buffer.[m
[31m-    // otherwise the string will the data "locally" (on the stack)[m
[31m-    // and then it's copied although we move the string.[m
[31m-    std::string buf = str_repeat(5000, "1234567890");[m
[31m-[m
[31m-    SUBCASE("copy_init") {[m
[31m-        // copy the content[m
[31m-        FileContent fc{buf};[m
[31m-        // content should now be equal[m
[31m-        CHECK_EQ(*fc.get(), buf);[m
[31m-        // pointers will be different[m
[31m-        CHECK_NE(fc.get()->data(), buf.data());[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("move_init") {[m
[31m-        // remember the ptr[m
[31m-        const std::string::value_type* bufptr = buf.data();[m
[31m-[m
[31m-        // move the content[m
[31m-        FileContent fc{std::move(buf)};[m
[31m-[m
[31m-        // pointers will be the same[m
[31m-        CHECK_EQ(fc.get()->data(), bufptr);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("size") {[m
[31m-        std::string bla = "gschichten";[m
[31m-        FileContent fc{std::move(bla)};[m
[31m-        CHECK_EQ(fc.get_size(), 10);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("chararray_init") {[m
[31m-        const char* stuff = "legacysoftware";[m
[31m-        FileContent fc{stuff};[m
[31m-        CHECK_EQ(fc.get_size(), 14);[m
[31m-        CHECK_EQ(*fc.get(), stuff);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("copy_init") {[m
[31m-        // because of doctest magic, buf is reinitialized for each subcase![m
[31m-[m
[31m-        FileContent fc1{std::move(buf)};[m
[31m-        FileContent fc2{fc1};[m
[31m-[m
[31m-        // content should now be equal[m
[31m-        CHECK_EQ(*fc1.get(), *fc2.get());[m
[31m-        // pointers will be the same[m
[31m-        CHECK_EQ(fc1.get()->data(), fc2.get()->data());[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("move_init") {[m
[31m-        // because of doctest magic, buf is reinitialized for each subcase![m
[31m-[m
[31m-        // first copy buf into a new file content, then move the file content[m
[31m-        FileContent fc1{buf};[m
[31m-        const std::string::value_type* fc1ptr = fc1.get()->data();[m
[31m-[m
[31m-        FileContent fc2{std::move(fc1)};[m
[31m-[m
[31m-        // content should now be equal[m
[31m-        CHECK_EQ(*fc2.get(), buf);[m
[31m-        // fc2 & buf pointers will be different[m
[31m-        CHECK_NE(fc2.get()->data(), buf.data());[m
[31m-        // the pointer fc1 had should be the same that fc2 now has[m
[31m-        CHECK_EQ(fc2.get()->data(), fc1ptr);[m
[31m-[m
[31m-        // fc1 is now "empty" since we moved from it[m
[31m-        CHECK_EQ(fc1.get(), nullptr);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("Audio") {[m
[31m-    SUBCASE("type") {[m
[31m-        Audio file{};[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("rename") {[m
[31m-        Audio file{};[m
[31m-        // should be false by default[m
[31m-        CHECK_EQ(file.rename(""), false);[m
[31m-        CHECK_EQ(file.rename("rolf"), false);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_1") {[m
[31m-        Audio file{FileContent{"magic audio file"}, 20};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 20);[m
[31m-        CHECK_EQ(file.get_size(), 16);[m
[31m-        CHECK_EQ(*file.get_content().get(), "magic audio file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 3840000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_2") {[m
[31m-        Audio file{FileContent{"great audio file"}, 25};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 25);[m
[31m-        CHECK_EQ(file.get_size(), 16);[m
[31m-        CHECK_EQ(*file.get_content().get(), "great audio file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 4800000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_3") {[m
[31m-        Audio file{FileContent{"impressive audio file"}, 415};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 415);[m
[31m-        CHECK_EQ(file.get_size(), 21);[m
[31m-        CHECK_EQ(*file.get_content().get(), "impressive audio file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 79680000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_1") {[m
[31m-        Audio file{FileContent{"impressive audio file"}, 415};[m
[31m-        file.update(FileContent{"upgrayedd"}, 100);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 100);[m
[31m-        CHECK_EQ(file.get_size(), 9);[m
[31m-        CHECK_EQ(*file.get_content().get(), "upgrayedd");[m
[31m-        CHECK_EQ(file.get_raw_size(), 19200000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_2") {[m
[31m-        Audio file{FileContent{"random audio file"}, 4};[m
[31m-        file.update(FileContent{"ulrd omoeiaf niad"}, 59);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 59);[m
[31m-        CHECK_EQ(file.get_size(), 17);[m
[31m-        CHECK_EQ(*file.get_content().get(), "ulrd omoeiaf niad");[m
[31m-        CHECK_EQ(file.get_raw_size(), 11328000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_move") {[m
[31m-        std::string buf = str_repeat(5000, "1234567890");[m
[31m-[m
[31m-        Audio file{FileContent{"innocent audio file"}, 9001};[m
[31m-        FileContent massive_content{buf};[m
[31m-        const std::string::value_type* dataptr = massive_content.get()->data();[m
[31m-        file.update(std::move(massive_content), 9001);[m
[31m-[m
[31m-        // the data pointer in the file should be the same as the content had before updating[m
[31m-        CHECK_EQ(file.get_content().get()->data(), dataptr);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "AUD");[m
[31m-        CHECK_EQ(file.get_duration(), 9001);[m
[31m-        CHECK_EQ(file.get_size(), 50000);[m
[31m-        CHECK_EQ(*file.get_content().get(), buf);[m
[31m-        CHECK_EQ(file.get_raw_size(), 1728192000);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("Document") {[m
[31m-    SUBCASE("type") {[m
[31m-        Document file{};[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("rename") {[m
[31m-        Document file{};[m
[31m-        // should be false by default[m
[31m-        CHECK_EQ(file.rename(""), false);[m
[31m-        CHECK_EQ(file.rename("rolf"), false);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_1") {[m
[31m-        Document file{FileContent{"magic document file"}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 17);[m
[31m-        CHECK_EQ(file.get_size(), 19);[m
[31m-        CHECK_EQ(*file.get_content().get(), "magic document file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 19);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_2") {[m
[31m-        Document file{FileContent{"great document file"}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 17);[m
[31m-        CHECK_EQ(file.get_size(), 19);[m
[31m-        CHECK_EQ(*file.get_content().get(), "great document file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 19);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_3") {[m
[31m-        Document file{FileContent{"impressive document file"}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 22);[m
[31m-        CHECK_EQ(file.get_size(), 24);[m
[31m-        CHECK_EQ(*file.get_content().get(), "impressive document file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 24);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_1") {[m
[31m-        Document file{FileContent{"impressive document file"}};[m
[31m-        file.update(FileContent{"upgrayedd"});[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 9);[m
[31m-        CHECK_EQ(file.get_size(), 9);[m
[31m-        CHECK_EQ(*file.get_content().get(), "upgrayedd");[m
[31m-        CHECK_EQ(file.get_raw_size(), 9);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_2") {[m
[31m-        Document file{FileContent{"random document file"}};[m
[31m-        file.update(FileContent{"fu elntrom icmdeodna"});[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 18);[m
[31m-        CHECK_EQ(file.get_size(), 20);[m
[31m-        CHECK_EQ(*file.get_content().get(), "fu elntrom icmdeodna");[m
[31m-        CHECK_EQ(file.get_raw_size(), 20);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_move") {[m
[31m-        std::string buf = str_repeat(5000, "123456789 ");[m
[31m-[m
[31m-        Document file{FileContent{"innocent document file"}};[m
[31m-        FileContent massive_content{buf};[m
[31m-        const std::string::value_type* dataptr = massive_content.get()->data();[m
[31m-        file.update(std::move(massive_content));[m
[31m-[m
[31m-        // the data pointer in the file should be the same as the content had before updating[m
[31m-        CHECK_EQ(file.get_content().get()->data(), dataptr);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "DOC");[m
[31m-        CHECK_EQ(file.get_character_count(), 45000);[m
[31m-        CHECK_EQ(file.get_size(), 50000);[m
[31m-        CHECK_EQ(*file.get_content().get(), buf);[m
[31m-        CHECK_EQ(file.get_raw_size(), 50000);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("Image") {[m
[31m-    SUBCASE("type") {[m
[31m-        Image file{};[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("rename") {[m
[31m-        Image file{};[m
[31m-        // should be false by default[m
[31m-        CHECK_EQ(file.rename(""), false);[m
[31m-        CHECK_EQ(file.rename("rolf"), false);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_1") {[m
[31m-        Image file{FileContent{"magic image file"}, {1920, 1080}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 16);[m
[31m-        CHECK_EQ(*file.get_content().get(), "magic image file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 8294400);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_2") {[m
[31m-        Image file{FileContent{"great image file"}, {800, 600}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{800, 600});[m
[31m-        CHECK_EQ(*file.get_content().get(), "great image file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 1920000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_3") {[m
[31m-        Image file{FileContent{"impressive image file"}, {3840, 2160}};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{3840, 2160});[m
[31m-        CHECK_EQ(file.get_size(), 21);[m
[31m-        CHECK_EQ(*file.get_content().get(), "impressive image file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 33177600);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_1") {[m
[31m-        Image file{FileContent{"impressive image file"}, {640, 480}};[m
[31m-        file.update(FileContent{"upgrayedd"}, {1920, 1080});[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 9);[m
[31m-        CHECK_EQ(*file.get_content().get(), "upgrayedd");[m
[31m-        CHECK_EQ(file.get_raw_size(), 8294400);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_2") {[m
[31m-        Image file{FileContent{"random image file"}, {20, 20}};[m
[31m-        file.update(FileContent{"nm ro failemediag"}, {50, 50});[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{50, 50});[m
[31m-        CHECK_EQ(file.get_size(), 17);[m
[31m-        CHECK_EQ(*file.get_content().get(), "nm ro failemediag");[m
[31m-        CHECK_EQ(file.get_raw_size(), 10000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_move") {[m
[31m-        std::string buf = str_repeat(5000, "1234567890");[m
[31m-[m
[31m-        Image file{FileContent{"innocent image file"}, {800, 600}};[m
[31m-        FileContent massive_content{buf};[m
[31m-        const std::string::value_type* dataptr = massive_content.get()->data();[m
[31m-        file.update(std::move(massive_content), {1920, 1080});[m
[31m-[m
[31m-        // the data pointer in the file should be the same as the content had before updating[m
[31m-        CHECK_EQ(file.get_content().get()->data(), dataptr);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "IMG");[m
[31m-        CHECK_EQ(file.get_resolution(), Image::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 50000);[m
[31m-        CHECK_EQ(*file.get_content().get(), buf);[m
[31m-        CHECK_EQ(file.get_raw_size(), 8294400);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("content_owning") {[m
[31m-        std::string buf = str_repeat(5000, "lol");[m
[31m-        std::shared_ptr<const std::string> access;[m
[31m-        {[m
[31m-            // copy the file content string[m
[31m-            Image file{FileContent{buf}, {800, 600}};[m
[31m-            access = file.get_content().get();[m
[31m-[m
[31m-            // now there have to be two owners: the image file, and our content pointer here.[m
[31m-            CHECK_EQ(access.use_count(), 2);[m
[31m-            CHECK_EQ(*access, buf);[m
[31m-            // image is deallocated, therefore the filecontent is freed[m
[31m-        }[m
[31m-        // now only the pointer in this function owns the data, since image is gone.[m
[31m-        CHECK_EQ(access.use_count(), 1);[m
[31m-        CHECK_EQ(*access, buf);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("Video") {[m
[31m-    SUBCASE("type") {[m
[31m-        Video file{};[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("rename") {[m
[31m-        Video file{};[m
[31m-        // should be false by default[m
[31m-        CHECK_EQ(file.rename(""), false);[m
[31m-        CHECK_EQ(file.rename("rolf"), false);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_1") {[m
[31m-        Video file{FileContent{"magic video file"}, {1920, 1080}, 600.5};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(600.5));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 16);[m
[31m-        CHECK_EQ(*file.get_content().get(), "magic video file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 112067712000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_2") {[m
[31m-        Video file{FileContent{"great video file"}, {800, 600}, 40.25};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(40.25));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{800, 600});[m
[31m-        CHECK_EQ(*file.get_content().get(), "great video file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 1738080000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("construction_3") {[m
[31m-        Video file{FileContent{"impressive video file"}, {3840, 2160}, 60.0 * 60.0 * 2.2};[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(60.0 * 60.0 * 2.2));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{3840, 2160});[m
[31m-        CHECK_EQ(file.get_size(), 21);[m
[31m-        CHECK_EQ(*file.get_content().get(), "impressive video file");[m
[31m-        CHECK_EQ(file.get_raw_size(), 5912248320000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_1") {[m
[31m-        Video file{FileContent{"impressive video file"}, {640, 480}, 180.1};[m
[31m-        file.update(FileContent{"upgrayedd"}, {1920, 1080}, 100);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(100));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 9);[m
[31m-        CHECK_EQ(*file.get_content().get(), "upgrayedd");[m
[31m-        CHECK_EQ(file.get_raw_size(), 18662400000);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_2") {[m
[31m-        Video file{FileContent{"random video file"}, {20, 20}, 25.8};[m
[31m-        file.update(FileContent{"e arm dioleovdinf"}, {50, 50}, 50.50);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(50.50));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{50, 50});[m
[31m-        CHECK_EQ(file.get_size(), 17);[m
[31m-        CHECK_EQ(*file.get_content().get(), "e arm dioleovdinf");[m
[31m-        CHECK_EQ(file.get_raw_size(), 11362500);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("update_move") {[m
[31m-        std::string buf = str_repeat(5000, "1234567890");[m
[31m-[m
[31m-        Video file{FileContent{"innocent video file"}, {800, 600}, 10.5};[m
[31m-        FileContent massive_content{buf};[m
[31m-        const std::string::value_type* dataptr = massive_content.get()->data();[m
[31m-        file.update(std::move(massive_content), {1920, 1080}, 9001.12);[m
[31m-[m
[31m-        // the data pointer in the file should be the same as the content had before updating[m
[31m-        CHECK_EQ(file.get_content().get()->data(), dataptr);[m
[31m-[m
[31m-        CHECK_EQ(file.get_type(), "VID");[m
[31m-        CHECK_EQ(file.get_duration(), doctest::Approx(9001.12));[m
[31m-        CHECK_EQ(file.get_resolution(), Video::resolution_t{1920, 1080});[m
[31m-        CHECK_EQ(file.get_size(), 50000);[m
[31m-        CHECK_EQ(*file.get_content().get(), buf);[m
[31m-        CHECK_EQ(file.get_raw_size(), 1679821286400);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("Filesystem") {[m
[31m-    auto fs = std::make_shared<Filesystem>();[m
[31m-    // just the pointer in this function should keep the fs alive[m
[31m-    CHECK_EQ(fs.use_count(), 1);[m
[31m-[m
[31m-    CHECK_EQ(fs->register_file("movie_script.org", std::make_shared<Document>("great plot")), true);[m
[31m-    CHECK_EQ(fs->register_file("movie.av1", std::make_shared<Video>("awesome content", Video::resolution_t{1920, 1080}, 1200.0)), true);[m
[31m-    CHECK_EQ(fs->register_file("landscape.avif", std::make_shared<Image>("best picture", Image::resolution_t{1920, 1080})), true);[m
[31m-    CHECK_EQ(fs->register_file("music.opus", std::make_shared<Audio>("relaxing music", 420)), true);[m
[31m-[m
[31m-    CHECK_EQ(fs->register_file("secret_diary.doc", std::make_shared<Document>("bad plot")), true);[m
[31m-    CHECK_EQ(fs->register_file("bad_movie.hevc", std::make_shared<Video>("boring content", Video::resolution_t{640, 480}, 1600.0)), true);[m
[31m-    CHECK_EQ(fs->register_file("football.wmf", std::make_shared<Image>("indecipherable image", Image::resolution_t{433, 512})), true);[m
[31m-    CHECK_EQ(fs->register_file("vacuum.wma", std::make_shared<Audio>("annoying music", 80)), true);[m
[31m-[m
[31m-    // just the pointer in this function should keep the fs alive[m
[31m-    // if this check fails, something else is keeping fs alive, too.[m
[31m-    CHECK_EQ(fs.use_count(), 1);[m
[31m-[m
[31m-    SUBCASE("register") {[m
[31m-        auto fs2 = std::make_shared<Filesystem>();[m
[31m-        // empty name not allowed[m
[31m-        CHECK_EQ(fs2->register_file("", std::make_shared<Audio>("nope", 0)), false);[m
[31m-        // empty file pointer not allowed[m
[31m-        CHECK_EQ(fs2->register_file("great", nullptr), false);[m
[31m-[m
[31m-        CHECK_EQ(fs->get_file("music.opus")->get_name(), "music.opus");[m
[31m-        CHECK_EQ(fs->get_file("vacuum.wma")->get_name(), "vacuum.wma");[m
[31m-        CHECK_EQ(fs.use_count(), 1);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("reregister") {[m
[31m-        auto fs2 = std::make_shared<Filesystem>();[m
[31m-[m
[31m-        // file already registered in other filesystem[m
[31m-        CHECK_EQ(fs2->register_file("rolf.opus", fs->get_file("music.opus")), false);[m
[31m-        CHECK_EQ(fs->get_file("music.opus")->get_name(), "music.opus");[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("get_file") {[m
[31m-        CHECK_EQ(fs->get_file_count(), 8);[m
[31m-        CHECK_EQ(fs->in_use(), 107);[m
[31m-[m
[31m-        auto&& file1 = fs->get_file("football.wmf");[m
[31m-        CHECK_NE(file1, nullptr);[m
[31m-        CHECK_EQ(*file1->get_content().get(), "indecipherable image");[m
[31m-[m
[31m-        auto&& file2 = fs->get_file("movie.av1");[m
[31m-        CHECK_NE(file2, nullptr);[m
[31m-        CHECK_EQ(*file2->get_content().get(), "awesome content");[m
[31m-[m
[31m-        CHECK_EQ(fs->get_file_count(), 8);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("remove_file") {[m
[31m-        CHECK_EQ(fs->get_file_count(), 8);[m
[31m-[m
[31m-        CHECK_EQ(fs->remove_file("nonexistant"), false);[m
[31m-        CHECK_EQ(fs->remove_file("football.wmf"), true);[m
[31m-        CHECK_EQ(fs->get_file_count(), 7);[m
[31m-        CHECK_EQ(fs->in_use(), 87);[m
[31m-[m
[31m-        {[m
[31m-            auto&& file = fs->get_file("football.wmf");[m
[31m-            CHECK_EQ(file, nullptr);[m
[31m-            CHECK_EQ(fs->remove_file("football.wmf"), false);[m
[31m-        }[m
[31m-        {[m
[31m-            auto&& file = fs->get_file("movie.av1");[m
[31m-            CHECK_NE(file, nullptr);[m
[31m-            CHECK_EQ(*file->get_content().get(), "awesome content");[m
[31m-            CHECK_EQ(fs->remove_file("movie.av1"), true);[m
[31m-            auto&& file2 = fs->get_file("movie.av1");[m
[31m-            CHECK_EQ(file2, nullptr);[m
[31m-            CHECK_EQ(fs->get_file_count(), 6);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("rename_file") {[m
[31m-        CHECK_EQ(fs->get_file_count(), 8);[m
[31m-        CHECK_EQ(fs->in_use(), 107);[m
[31m-        CHECK_EQ(fs->rename_file("what.opus", "notthere.opus"), false);[m
[31m-[m
[31m-        {[m
[31m-            // check content[m
[31m-            auto&& file = fs->get_file("music.opus");[m
[31m-            CHECK_NE(file, nullptr);[m
[31m-            CHECK_EQ(*file->get_content().get(), "relaxing music");[m
[31m-        }[m
[31m-[m
[31m-        CHECK_EQ(fs->rename_file("music.opus", "relaxing.opus"), true);[m
[31m-[m
[31m-        {[m
[31m-            // check content[m
[31m-            auto&& file = fs->get_file("relaxing.opus");[m
[31m-            CHECK_NE(file, nullptr);[m
[31m-            CHECK_EQ(*file->get_content().get(), "relaxing music");[m
[31m-            // old file must be gone now[m
[31m-            auto&& file2 = fs->get_file("music.opus");[m
[31m-            CHECK_EQ(file2, nullptr);[m
[31m-        }[m
[31m-[m
[31m-        CHECK_EQ(fs->get_file_count(), 8);[m
[31m-        CHECK_EQ(fs->in_use(), 107);[m
[31m-        CHECK_EQ(fs->remove_file("relaxing.opus"), true);[m
[31m-[m
[31m-        {[m
[31m-            auto&& file = fs->get_file("relaxing.opus");[m
[31m-            CHECK_EQ(file, nullptr);[m
[31m-        }[m
[31m-[m
[31m-        CHECK_EQ(fs->get_file_count(), 7);[m
[31m-        CHECK_EQ(fs->in_use(), 93);[m
[31m-    }[m
[31m-[m
[31m-    SUBCASE("files_in_size_range") {[m
[31m-        CHECK_EQ(fs->files_in_size_range(0, 0).size(), 0);[m
[31m-        CHECK_EQ(fs->files_in_size_range(std::numeric_limits<size_t>::max(), 0).size(), 8);[m
[31m-        CHECK_EQ(fs->files_in_size_range(std::numeric_limits<size_t>::max(),[m
[31m-                                         std::numeric_limits<size_t>::max()).size(), 0);[m
[31m-        CHECK_EQ(fs->files_in_size_range(10).size(), 2);[m
[31m-        {[m
[31m-            auto files = fs->files_in_size_range(12);[m
[31m-            CHECK_EQ(files.size(), 3);[m
[31m-            std::vector<std::string> expected{"secret_diary.doc", "landscape.avif", "movie_script.org"};[m
[31m-            size_t found = 0;[m
[31m-            for (auto&& exp : expected) {[m
[31m-                for (auto&& result : files) {[m
[31m-                    if (result->get_name() == exp) {[m
[31m-                        found += 1;[m
[31m-                        // check if the content was not copied[m
[31m-                        CHECK_EQ(fs->get_file(exp)->get_content().get(), result->get_content().get());[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-            CHECK_EQ(found, 3);[m
[31m-        }[m
[31m-        {[m
[31m-            auto files = fs->files_in_size_range(14, 10);[m
[31m-            CHECK_EQ(files.size(), 5);[m
[31m-            std::vector<std::string> expected{"vacuum.wma", "bad_movie.hevc",[m
[31m-                                              "music.opus", "landscape.avif",[m
[31m-                                              "movie_script.org"};[m
[31m-            size_t found = 0;[m
[31m-            for (auto&& exp : expected) {[m
[31m-                for (auto&& result : files) {[m
[31m-                    if (result->get_name() == exp) {[m
[31m-                        found += 1;[m
[31m-                        CHECK_EQ(fs->get_file(exp)->get_content().get(), result->get_content().get());[m
[31m-                    }[m
[31m-                }[m
[31m-            }[m
[31m-            CHECK_EQ(found, 5);[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    // still, nothing but this function should keep the filesystem pointer alive.[m
[31m-    CHECK_EQ(fs.use_count(), 1);[m
[31m-}[m
[31m-[m
[31m-[m
[31m-TEST_CASE("File_rename") {[m
[31m-    auto fs = std::make_shared<Filesystem>();[m
[31m-    fs->register_file("thesis.org", std::make_shared<Document>("very science"));[m
[31m-    fs->register_file("samples.av1", std::make_shared<Video>("brains", Video::resolution_t{1920, 1080}, 100.0));[m
[31m-    fs->register_file("funny_cats.mpg", std::make_shared<Video>("cute", Video::resolution_t{640, 480}, 60.0));[m
[31m-[m
[31m-    {[m
[31m-        auto&& file = fs->get_file("samples.av1");[m
[31m-        CHECK_NE(file, nullptr);[m
[31m-        CHECK_EQ(file->get_name(), "samples.av1");[m
[31m-        CHECK_EQ(file->rename("brains.av1"), true);[m
[31m-        CHECK_EQ(file->get_name(), "brains.av1");[m
[31m-[m
[31m-        // name already occupied in fs[m
[31m-        CHECK_EQ(file->rename("brains.av1"), false);[m
[31m-[m
[31m-        // fs must now point to the same file[m
[31m-        CHECK_EQ(fs->get_file("brains.av1"), file);[m
[31m-    }[m
[31m-    {[m
[31m-        auto&& file = fs->get_file("thesis.org");[m
[31m-        CHECK_NE(file, nullptr);[m
[31m-        CHECK_EQ(file->get_name(), "thesis.org");[m
[31m-        CHECK_EQ(file->rename("tothemoon.org"), true);[m
[31m-        CHECK_EQ(file->get_name(), "tothemoon.org");[m
[31m-[m
[31m-        // fs must now point to the same file[m
[31m-        CHECK_EQ(fs->get_file("tothemoon.org"), file);[m
[31m-    }[m
[31m-    {[m
[31m-        auto&& file = fs->get_file("funny_cats.mpg");[m
[31m-        CHECK_NE(file, nullptr);[m
[31m-        CHECK_EQ(file->get_name(), "funny_cats.mpg");[m
[31m-        CHECK_EQ(file->rename("funniest_cats.mpg"), true);[m
[31m-        CHECK_EQ(fs->rename_file("funniest_cats.mpg", "mediocre_cats.mpg"), true);[m
[31m-        CHECK_EQ(file->get_name(), "mediocre_cats.mpg");[m
[31m-        CHECK_EQ(file->rename("fun_cats.mpg"), true);[m
[31m-        CHECK_EQ(file->get_name(), "fun_cats.mpg");[m
[31m-        CHECK_EQ(fs->get_file("fun_cats.mpg"), file);[m
[31m-    }[m
[31m-[m
[31m-    // just the pointer in this function should keep the fs alive[m
[31m-    CHECK_EQ(fs.use_count(), 1);[m
[31m-[m
[31m-    {[m
[31m-        std::shared_ptr<File> longliving;[m
[31m-        {[m
[31m-            auto fs2 = std::make_shared<Filesystem>();[m
[31m-            fs2->register_file("paper.org", std::make_shared<Document>("much research"));[m
[31m-            longliving = fs2->get_file("paper.org");[m
[31m-            CHECK_NE(longliving, nullptr);[m
[31m-            CHECK_EQ(fs2.use_count(), 1);[m
[31m-        }[m
[31m-[m
[31m-        // here, fs2 was deallocated, but the file is still living[m
[31m-        // since the filesystem is gone, renaming must no longer work.[m
[31m-        CHECK_EQ(longliving->rename("best_paper.org"), false);[m
[31m-    }[m
[31m-}[m
[31m-[m
